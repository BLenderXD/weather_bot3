import logging
import asyncio
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.types import Update
from aiogram import Bot
from datetime import datetime
import os
from dotenv import load_dotenv

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

load_dotenv()

class LoggingMiddleware(BaseMiddleware):
    _log_bot = None 

    def __init__(self, main_bot: Bot):
        super().__init__()
        self.main_bot = main_bot
        self._init_log_bot()
        logging.info("‚úÖ LoggingMiddleware —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        print("‚úÖ LoggingMiddleware —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")

    @classmethod
    def _init_log_bot(cls):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä—É—é—â–µ–≥–æ –±–æ—Ç–∞."""
        if cls._log_bot is None:
            token = os.getenv("BOT_LOG_TOKEN")
            logging.info(f"–ü–æ–ª—É—á–µ–Ω BOT_LOG_TOKEN: {'–Ω–∞–π–¥–µ–Ω' if token else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
            if token:
                try:
                    cls._log_bot = Bot(token=token)
                    logging.info("–õ–æ–≥–∏—Ä—É—é—â–∏–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥-–±–æ—Ç–∞: {e}")
            else:
                logging.error("BOT_LOG_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

    async def __call__(self, handler, event: Update, data: dict):
        logging.info("Middleware –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è")
        admins = os.getenv("ADMIN")
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π: _log_bot = {self._log_bot is not None}, admins = {admins}")

        if self._log_bot and admins:
            logging.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è")
            asyncio.create_task(self._process_event(event))
        else:
            logging.warning("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç _log_bot –∏–ª–∏ admins")

        return await handler(event, data)

    async def _process_event(self, event: Update):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –∞–¥–º–∏–Ω—É."""
        logging.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è")
        try:
            user_info = await self._get_user_info(event)
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}")
            if not user_info or user_info.get("is_bot"):
                logging.info("–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —ç—Ç–æ –±–æ—Ç")
                return

            event_type, event_data = self._get_event_data(event)
            logging.info(f"–¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}, –¥–∞–Ω–Ω—ã–µ: {event_data}")
            if event_type == "unknown":
                logging.info("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return

            await self._send_log(user_info, event_type, event_data)
            logging.info("–õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)

    async def _get_user_info(self, event: Update) -> dict | None:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è."""
        user = None
        sources = [
            "callback_query",
            "message",
            "inline_query",
            "poll_answer",
            "chat_join_request",
            "my_chat_member",
            "chat_member",
        ]

        for source in sources:
            if obj := getattr(event, source, None):
                user = getattr(obj, "from_user", None)
                if user:
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {source}")
                    break

        if not user:
            logging.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–±—ã—Ç–∏–∏")
            return None

        return {
            "name": user.full_name,
            "username": user.username or "N/A",
            "user_id": user.id,
            "is_bot": user.is_bot,
        }

    def _get_event_data(self, event: Update) -> tuple[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ."""
        if event.callback_query:
            data = event.callback_query.data
            return "callback", data[:200] if data else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if event.message:
            text = event.message.text or event.message.caption
            return "message", text[:200] if text else "–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞"
        if event.inline_query:
            return "inline", event.inline_query.query[:200]
        return "unknown", ""

    async def _send_log(self, user_info: dict, event_type: str, event_data: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–¥–º–∏–Ω—É."""
        try:
            admin_id_str = os.getenv("ADMIN")
            logging.info(f"–ü–æ–ª—É—á–µ–Ω ADMIN –∏–∑ .env: {admin_id_str}")
            if not admin_id_str:
                raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env")
            
            admin_id = int(admin_id_str)
            message = (
                f"üë§ <b>{user_info['name']} (@{user_info['username']})</b>\n"
                f"üÜî <code>{user_info['user_id']}</code>\n"
                f"üì© <b>{event_type.capitalize()}</b>\n"
                f"üìù {event_data or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                f"‚è± {datetime.now().strftime('%H:%M:%S.%f')[:-3]}"
            )

            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {message}")
            await self._log_bot.send_message(
                chat_id=admin_id,
                text=message,
                parse_mode="HTML",
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}", exc_info=True)

    @classmethod
    async def close_log_bot(cls):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä—É—é—â–µ–≥–æ –±–æ—Ç–∞."""
        try:
            if cls._log_bot:
                await cls._log_bot.session.close()
                logging.info("–°–µ—Å—Å–∏—è –ª–æ–≥-–±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –ª–æ–≥-–±–æ—Ç–∞: {e}")