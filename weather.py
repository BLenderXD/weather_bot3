import asyncio
import os
import aiohttp
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

OWM_API_KEY = os.getenv("OWM_API_KEY")
BASE_URL = "https://api.openweathermap.org/data/2.5/weather"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_session = None

async def get_session():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π —Å–µ—Å—Å–∏–∏."""
    global _session
    if _session is None or _session.closed:
        _session = aiohttp.ClientSession()
    return _session

async def close_session():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    global _session
    if _session and not _session.closed:
        await _session.close()

async def fetch_weather_data(city_name: str, session: aiohttp.ClientSession) -> dict:
    """–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."""
    params = {
        "q": city_name,
        "appid": OWM_API_KEY,
        "units": "metric",
        "lang": "ru"
    }
    try:
        async with session.get(BASE_URL, params=params) as response:
            data = await response.json()
            data["status"] = response.status
            return data
    except Exception as e:
        return {"status": 500, "message": str(e)}

async def check_city_exists(city_name: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞."""
    session = await get_session()
    data = await fetch_weather_data(city_name, session)

    if data["status"] == 200:
        temp = data["main"]["temp"]
        return True, f"üåÜ {city_name} | {temp}¬∞C"
    else:
        msg = data.get("message", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        if msg.lower() == "city not found":
            return False, f"üåÜ {city_name} | (–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω)"
        return False, f"üåÜ {city_name} | (–æ—à–∏–±–∫–∞: {msg})"

async def get_weather_label(city_name: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –º–µ—Ç–∫–∏ –ø–æ–≥–æ–¥—ã."""
    success, label = await check_city_exists(city_name)
    return label

async def get_weather_label_parallel(city_names: list[str]) -> list[str]:
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤."""
    session = await get_session()
    tasks = [fetch_weather_data(city, session) for city in city_names]
    results = await asyncio.gather(*tasks)

    labels = []
    for city, data in zip(city_names, results):
        if data["status"] == 200:
            temp = data["main"]["temp"]
            labels.append(f"üåÜ {city} | {temp}¬∞C")
        else:
            msg = data.get("message", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            if msg.lower() == "city not found":
                labels.append(f"üåÜ {city} | (–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            else:
                labels.append(f"üåÜ {city} | (–æ—à–∏–±–∫–∞: {msg})")
    return labels

async def get_detailed_weather(city_name: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)."""
    session = await get_session()
    data = await fetch_weather_data(city_name, session)

    if data["status"] != 200:
        msg = data.get("message", "–æ—à–∏–±–∫–∞")
        if msg.lower() == "city not found":
            return f"üåç –ü–æ–≥–æ–¥–∞ –≤ {city_name} | –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª. –ø–æ–≥–æ–¥—ã: {msg}"

    main = data.get("main", {})
    wind = data.get("wind", {})
    clouds = data.get("clouds", {})
    sys_data = data.get("sys", {})
    weather = data.get("weather", [{}])[0]
    visibility = data.get("visibility", 0)

    temp = main.get("temp")
    feels_like = main.get("feels_like")
    humidity = main.get("humidity")
    pressure = main.get("pressure")
    wind_speed = wind.get("speed")
    wind_deg = wind.get("deg", 0)
    cloudiness = clouds.get("all", 0)
    sunrise_ts = sys_data.get("sunrise")
    sunset_ts = sys_data.get("sunset")
    desc = weather.get("description", "")
    vis_km = visibility / 1000

    now_date = datetime.now().strftime("%d %B %Y")

    def fmt_time(ts):
        return datetime.fromtimestamp(ts).strftime("%H:%M") if ts else "??:??"

    sunrise_str = fmt_time(sunrise_ts)
    sunset_str = fmt_time(sunset_ts)
    direction = get_wind_direction(wind_deg)

    lines = [
        f"<b>üåç –ü–æ–≥–æ–¥–∞ –≤ {city_name} | {now_date}</b>",
        "",
        f"<b>üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}¬∞C <i>(–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)</i>",
        f"<b>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {humidity}%",
        f"<b>üìã –î–∞–≤–ª–µ–Ω–∏–µ:</b> {pressure} –≥–ü–∞",
        f"<b>üí® –í–µ—Ç–µ—Ä:</b> {wind_speed} –º/—Å, {direction}",
        f"<b>‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloudiness}%",
        f"<b>üóí –û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}",
        f"<b>üëÄ –í–∏–¥–∏–º–æ—Å—Ç—å:</b> {vis_km} –∫–º",
        f"<b>üåÖ –í–æ—Å—Ö–æ–¥:</b> {sunrise_str} | <b>üåá –ó–∞–∫–∞—Ç:</b> {sunset_str}",
    ]
    return "\n".join(lines)




def get_wind_direction(deg: float) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)."""
    dirs = [
        (0, '—Å–µ–≤–µ—Ä–Ω—ã–π'), (45, '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π'), (90, '–≤–æ—Å—Ç–æ—á–Ω—ã–π'),
        (135, '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π'), (180, '—é–∂–Ω—ã–π'), (225, '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π'),
        (270, '–∑–∞–ø–∞–¥–Ω—ã–π'), (315, '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π'), (360, '—Å–µ–≤–µ—Ä–Ω—ã–π')
    ]
    closest = min(dirs, key=lambda x: abs(x[0] - deg))
    return closest[1]