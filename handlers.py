from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter

from database import register_user_if_not_exists, log_query, find_cities_in_db
from weather import get_weather_label, get_detailed_weather, check_city_exists, get_weather_label_parallel
from keyboards import main_menu, get_back_keyboard
from states import States

router = Router()

async def set_pagination_state(state: FSMContext, cities: list, page: int = 1):
    await state.update_data(cities=cities, current_page=page)

async def get_pagination_state(state: FSMContext):
    data = await state.get_data()
    return data.get("cities", []), data.get("current_page", 1)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start."""
    await state.clear()
    register_user_if_not_exists(message.from_user.id)

    text = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é, {message.from_user.first_name}!\n\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç –ø–æ–≥–æ–¥—É.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:"
    )
    await message.answer(text, reply_markup=main_menu)

@router.message(F.text == "üå° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤")
async def handle_view_cities(message: Message, state: FSMContext):
    kb = get_back_keyboard()
    text = (
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–í–æ–ª–≥–æ–≥—Ä–∞–¥, –í–æ—Ä–æ–Ω–µ–∂, –í–æ–ª–∂—Å–∫–∏–π, –ü–µ—Ä–º—å¬ª"
    )
    await message.answer(text, reply_markup=kb)
    await state.set_state(States.waiting_for_cities)

@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def handle_my_profile(message: Message, state: FSMContext):
    user = message.from_user
    back_kb = get_back_keyboard()

    username = user.username if user.username else "(–Ω–µ—Ç)"
    language = user.language_code if user.language_code else "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"

    text = (
        "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"‚Ä¢ –ò–º—è: {user.first_name}\n"
        f"‚Ä¢ ID: {user.id}\n"
        f"‚Ä¢ –í–∞—à tg: @{username}\n"
        f"‚Ä¢ –Ø–∑—ã–∫: {language}"
    )
    await message.answer(text, reply_markup=back_kb)

@router.callback_query(F.data == "back_to_menu")
async def callback_back(query: CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!\n\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç –ø–æ–≥–æ–¥—É.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:"
    )

    # üîπ –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message.edit_text –≤–º–µ—Å—Ç–æ query.edit_text
    await query.message.answer(text, reply_markup=main_menu)

# –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: –≤–º–µ—Å—Ç–æ state=States.waiting_for_cities => StateFilter(States.waiting_for_cities)
@router.message(StateFilter(States.waiting_for_cities))
async def process_city_list(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_text = message.text.strip()
    log_query(user_id, user_text)

    if not user_text:
        kb = get_back_keyboard()
        await message.answer("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤", reply_markup=kb)
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    raw_cities = [c.strip() for c in user_text.split(",") if c.strip()]
    cities = list(dict.fromkeys(raw_cities))
    if not cities:
        kb = get_back_keyboard()
        await message.answer("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤", reply_markup=kb)
        return

    found, not_found = find_cities_in_db(cities)
    additional_found = []
    for city in not_found:
        exists, _lbl = await check_city_exists(city)
        if exists:
            additional_found.append((city, city))

    if additional_found:
        found.extend(additional_found)
        not_found = [c for c in not_found if not any(c == f[0] for f in additional_found)]

    if found:
        await set_pagination_state(state, found, page=1)
        await show_cities_page(message, state)
    else:
        not_found_list = ", ".join(not_found) if not_found else "—É–∫–∞–∑–∞–Ω–Ω—ã–µ"
        kb = get_back_keyboard()
        await message.answer(f"‚ùå –¢–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤, –∫–∞–∫ {not_found_list}, –Ω–µ—Ç", reply_markup=kb)



async def show_cities_page(message: Message | CallbackQuery, state: FSMContext):
    cities, current_page = await get_pagination_state(state)
    
    if not cities:
        kb = get_back_keyboard()
        text_out = "‚ùå –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç"
        if isinstance(message, Message):
            await message.answer(text_out, reply_markup=kb)
        else:
            await message.message.edit_text(text_out, reply_markup=kb)
        return

    ITEMS_PER_PAGE = 4
    total_pages = (len(cities) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    current_page = max(1, min(current_page, total_pages))

    start_idx = (current_page - 1) * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_cities = cities[start_idx:end_idx]

    # –°–æ–±–∏—Ä–∞–µ–º –æ—Ñ–∏—Ü. –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    city_official_list = [official for (user_city, official) in page_cities]

    # üî• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û
    weather_labels = await get_weather_label_parallel(city_official_list)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    weather_buttons = []
    for (user_city, official_city), label in zip(page_cities, weather_labels):
        weather_buttons.append([
            InlineKeyboardButton(text=label, callback_data=f"details|{official_city}")
        ])

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"page_{current_page-1}"))

    nav_buttons.append(InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}", callback_data="none"))

    if current_page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"page_{current_page+1}"))

    # –ò—Ç–æ–≥–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    weather_kb = InlineKeyboardMarkup(
        inline_keyboard=weather_buttons + [nav_buttons] + [
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")]
        ]
    )

    text_out = "–í–æ—Ç –ø–æ–≥–æ–¥–∞ –ø–æ –≤–∞—à–∏–º –≥–æ—Ä–æ–¥–∞–º (—Å–º. –∫–Ω–æ–ø–∫–∏):"

    if isinstance(message, Message):
        await message.answer(text_out, reply_markup=weather_kb)
    else:
        await message.message.edit_text(text_out, reply_markup=weather_kb)


@router.callback_query(StateFilter(States.waiting_for_cities), lambda c: c.data.startswith("page_"))
async def handle_pagination(query: CallbackQuery, state: FSMContext):
    await query.answer()
    _, page_str = query.data.split("_", 1)
    page = int(page_str)
    cities, _ = await get_pagination_state(state)
    await set_pagination_state(state, cities, page)
    await show_cities_page(query, state)

@router.callback_query(lambda c: c.data.startswith("details|"))
async def callback_details(query: CallbackQuery, state: FSMContext):
    await query.answer()
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    _, city_name = query.data.split("|", 1)
    info = get_detailed_weather(city_name)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")]
        ]
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
    await query.message.edit_text(info, reply_markup=kb)


@router.message()
async def fallback_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_text = message.text.strip()
    log_query(user_id, user_text)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.")
